#!/usr/bin/env python2
from __future__ import print_function
from git_hooks import *
from datetime import datetime
from subprocess import Popen, PIPE
from itertools import dropwhile
from shutil import rmtree
import time, sys, os

# Execute commands in a blocking manner
def execute(command, **kwargs):
    result = Popen(command, **kwargs)
    result.wait()
    return result

# Determine whether we can skip sniffer a given file
def skip_code_sniff(script):
    skip_paths = (
        'PHPUnit/',
        'Smarty/',
        'movecars/',
        'library/netsuite/',
        'smarty/',
        'fedex/',
        'Selenium/WebDriver/',
        'Selenium/FbWebDriver/',
        'Selenium/FbWebDriver.390c600/',
        'CodeSniffer/'
    )

    for path in skip_paths:
        if path in script:
            print('Skipping:', script)
            return True

    return False

@git_hook
def coding_standards(status):
    cs_standard = 'DriveCurrent'
    cs_binary = '/usr/bin/phpcs'
    work_dir = '/tmp/hooks/sniffer'

    # check phpcs binary exists
    if not (os.path.isfile(cs_binary) and os.access(cs_binary, os.X_OK)):
        status.log('WARNING: PHP CodeSniffer binary is not available')

    # check that coding standard is listed
    all_standards = execute((cs_binary, '-i'), stdout=PIPE, stderr=PIPE)
    our_standard  = execute(('grep', cs_standard, '--'), stdin=all_standards.stdout, stdout=PIPE, stderr=PIPE)

    if our_standard.returncode != 0:
        return status.fails('Code standard "{0}" not found.'.format(cs_standard))

    # create log file

    # remove working directory
    rmtree(work_dir, True) # ignore errors

    # create working directory
    os.makedirs(work_dir)

    # What commit are we comparing against
    rev_parse = execute(('git', 'rev-parse', '--verify', 'HEAD'), stdout=PIPE, stderr=PIPE)
    if rev_parse.returncode == 0:
        against = 'HEAD'
    else:
        # Initial commit: diff against an empty tree object
        against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904'

    # this is the magic:
    # retrieve all files in staging area that are added, modified or renamed
    command = ('git', 'diff-index', '--name-only', '--cached', '--diff-filter=ACMR', against, '--')
    modified_files = execute(command, stdout=PIPE, stderr=PIPE)

    # Copy contents of staged version of files to temporary staging area
    # because we only want the staged version that will be commited and not
    # the version in the working directory
    files_list = modified_files.communicate()[0].split()
    for script in dropwhile(skip_code_sniff, files_list):
        script_info = execute(('git', 'diff-index', '--cached', against, script), stdout=PIPE, stderr=PIPE)
        script_cut  = execute(('cut', '-d ', '-f4'), stdin=script_info.stdout, stdout=PIPE, stderr=PIPE)
        script_id = script_cut.communicate()[0].strip()

        # create staged version of file in temporary staging area with the same
        # path as the original file so that the phpcs ignore filters can be applied
        full_path = os.path.join(work_dir, os.path.dirname(script))
        if not os.path.exists(full_path):
            os.makedirs(full_path)

        # Copy file to working folder
        full_name = os.path.join(full_path, os.path.basename(script))
        with open(full_name, 'a') as staged_copy:
            file_contents = execute(('git', 'cat-file', 'blob', script_id), stdout=staged_copy, stderr=PIPE)

    # Sniff the entire working directory
    code_sniff = execute((cs_binary, '--standard={}'.format(cs_standard), '-n', work_dir), stdout=PIPE, stderr=PIPE)
    print(code_sniff.stdout.read(), file=sys.stdout)
    print(code_sniff.stderr.read(), file=sys.stderr)
    if code_sniff.returncode != 0:
        return status.fails('Rejected due to code sniffer')

if __name__ == '__main__':
    run_hooks([hook for hook in locals().values() if is_hook(hook)])
